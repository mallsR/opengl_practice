#version 330 core
in vec3 Normal;
in vec3 FragPos;
out vec4 FragColor;

uniform vec3 lightPos;
uniform vec3 objectColor;
uniform vec3 lightColor;
// 摄影机的位置，用于计算specular lighting
uniform vec3 viewPos;

void main()
{
    // ambient light
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
    // vec3 result = ambient * objectColor;
    
    // Diffuse lighting
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    // compute diffuse compoent
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // Specular lighting
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    // compute specular compoent
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), 32);
    // 镜面强度(Specular Intensity)
    float specularStrength = 0.5;
    vec3 specular = specularStrength * spec * lightColor;
    
    vec3 result  = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
    // FragColor = vec4(lightColor * objectColor, 1.0);
}
