// 4. lighting maps

#version 330 core
in vec3 Normal;
in vec3 FragPos;
// diffuse maps coord
in vec2 TexCoords;
out vec4 FragColor;

// 摄影机的位置，用于计算specular lighting
uniform vec3 viewPos;

// materials
struct Material{
    sampler2D diffuse;
    sampler2D specular;
    // 影响镜面高光的散射/半径。
    float shininess;
};

uniform Material material;

// Light
struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;

void main()
{
    // ambient light
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

    // Diffuse lighting
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    // compute diffuse compoent
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * light.diffuse * vec3(texture(material.diffuse, TexCoords));
    
    // Specular lighting
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    // compute specular compoent
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), material.shininess);
    // 镜面强度(Specular Intensity)
    vec3 specular = spec * light.specular * vec3(texture(material.specular, TexCoords));
    
    vec3 result  = (ambient + diffuse + specular);
    FragColor = vec4(result, 1.0);
}
